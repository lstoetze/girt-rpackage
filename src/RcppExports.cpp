// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MCMCirt
Rcpp::List MCMCirt(const arma::mat X, int burnin, int gibbs, int thin, int chains, bool verbose);
RcppExport SEXP _girt_MCMCirt(SEXP XSEXP, SEXP burninSEXP, SEXP gibbsSEXP, SEXP thinSEXP, SEXP chainsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs(gibbsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCirt(X, burnin, gibbs, thin, chains, verbose));
    return rcpp_result_gen;
END_RCPP
}
// MCMCirt_var
Rcpp::List MCMCirt_var(const arma::mat Y, arma::vec alpha, arma::vec beta, const arma::mat X, int burnin, int gibbs, int thin, int chains, bool verbose, double prior_var_gamma, double proposal_var);
RcppExport SEXP _girt_MCMCirt_var(SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP XSEXP, SEXP burninSEXP, SEXP gibbsSEXP, SEXP thinSEXP, SEXP chainsSEXP, SEXP verboseSEXP, SEXP prior_var_gammaSEXP, SEXP proposal_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs(gibbsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_var(proposal_varSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCirt_var(Y, alpha, beta, X, burnin, gibbs, thin, chains, verbose, prior_var_gamma, proposal_var));
    return rcpp_result_gen;
END_RCPP
}
// MCMCirtG
Rcpp::List MCMCirtG(const arma::mat Yl, const arma::mat Yc, const arma::mat X, int burnin, int gibbs, int thin, int chains, bool verbose, double prior_var_gamma, const double proposal_var);
RcppExport SEXP _girt_MCMCirtG(SEXP YlSEXP, SEXP YcSEXP, SEXP XSEXP, SEXP burninSEXP, SEXP gibbsSEXP, SEXP thinSEXP, SEXP chainsSEXP, SEXP verboseSEXP, SEXP prior_var_gammaSEXP, SEXP proposal_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Yl(YlSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Yc(YcSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs(gibbsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type proposal_var(proposal_varSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCirtG(Yl, Yc, X, burnin, gibbs, thin, chains, verbose, prior_var_gamma, proposal_var));
    return rcpp_result_gen;
END_RCPP
}
// MCMCirtG2
Rcpp::List MCMCirtG2(const arma::mat Yl, const arma::mat Yc, const arma::mat X, int burnin, int gibbs, int thin, int chains, bool verbose, double prior_var_gamma, const double proposal_var);
RcppExport SEXP _girt_MCMCirtG2(SEXP YlSEXP, SEXP YcSEXP, SEXP XSEXP, SEXP burninSEXP, SEXP gibbsSEXP, SEXP thinSEXP, SEXP chainsSEXP, SEXP verboseSEXP, SEXP prior_var_gammaSEXP, SEXP proposal_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Yl(YlSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Yc(YcSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs(gibbsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type proposal_var(proposal_varSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCirtG2(Yl, Yc, X, burnin, gibbs, thin, chains, verbose, prior_var_gamma, proposal_var));
    return rcpp_result_gen;
END_RCPP
}
// MCMCirtG3
Rcpp::List MCMCirtG3(const arma::mat Yl, const arma::mat Yc, const arma::mat X, int burnin, int gibbs, int thin, int chains, bool verbose, double prior_var_gamma, const double proposal_var);
RcppExport SEXP _girt_MCMCirtG3(SEXP YlSEXP, SEXP YcSEXP, SEXP XSEXP, SEXP burninSEXP, SEXP gibbsSEXP, SEXP thinSEXP, SEXP chainsSEXP, SEXP verboseSEXP, SEXP prior_var_gammaSEXP, SEXP proposal_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Yl(YlSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Yc(YcSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs(gibbsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type proposal_var(proposal_varSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCirtG3(Yl, Yc, X, burnin, gibbs, thin, chains, verbose, prior_var_gamma, proposal_var));
    return rcpp_result_gen;
END_RCPP
}
// gamma_conditional
double gamma_conditional(const arma::mat Y, const arma::mat X, arma::vec& theta, arma::vec& gamma, double prior_var_gamma, arma::vec& alpha, arma::vec& beta, unsigned int J, unsigned int N, unsigned int K);
RcppExport SEXP _girt_gamma_conditional(SEXP YSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP gammaSEXP, SEXP prior_var_gammaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_conditional(Y, X, theta, gamma, prior_var_gamma, alpha, beta, J, N, K));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma
void update_gamma(const arma::mat Y, const arma::mat X, arma::vec& thetal, arma::vec& gamma, double prior_var_gamma, const double proposal_var, arma::vec& alpha, arma::vec& beta, unsigned int J, unsigned int N, unsigned int K, double& a);
RcppExport SEXP _girt_update_gamma(SEXP YSEXP, SEXP XSEXP, SEXP thetalSEXP, SEXP gammaSEXP, SEXP prior_var_gammaSEXP, SEXP proposal_varSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP NSEXP, SEXP KSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetal(thetalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_gamma(prior_var_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type proposal_var(proposal_varSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double& >::type a(aSEXP);
    update_gamma(Y, X, thetal, gamma, prior_var_gamma, proposal_var, alpha, beta, J, N, K, a);
    return R_NilValue;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _girt_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// norm_rs
double norm_rs(double a, double b);
RcppExport SEXP _girt_norm_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// half_norm_rs
double half_norm_rs(double a, double b);
RcppExport SEXP _girt_half_norm_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(half_norm_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// unif_rs
double unif_rs(double a, double b);
RcppExport SEXP _girt_unif_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(unif_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// exp_rs
double exp_rs(double a, double b);
RcppExport SEXP _girt_exp_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rnorm_trunc
double rnorm_trunc(double mu, double sigma, double lower, double upper);
RcppExport SEXP _girt_rnorm_trunc(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rnorm_trunc(mu, sigma, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_girt_MCMCirt", (DL_FUNC) &_girt_MCMCirt, 6},
    {"_girt_MCMCirt_var", (DL_FUNC) &_girt_MCMCirt_var, 11},
    {"_girt_MCMCirtG", (DL_FUNC) &_girt_MCMCirtG, 10},
    {"_girt_MCMCirtG2", (DL_FUNC) &_girt_MCMCirtG2, 10},
    {"_girt_MCMCirtG3", (DL_FUNC) &_girt_MCMCirtG3, 10},
    {"_girt_gamma_conditional", (DL_FUNC) &_girt_gamma_conditional, 10},
    {"_girt_update_gamma", (DL_FUNC) &_girt_update_gamma, 12},
    {"_girt_mvrnormArma", (DL_FUNC) &_girt_mvrnormArma, 3},
    {"_girt_norm_rs", (DL_FUNC) &_girt_norm_rs, 2},
    {"_girt_half_norm_rs", (DL_FUNC) &_girt_half_norm_rs, 2},
    {"_girt_unif_rs", (DL_FUNC) &_girt_unif_rs, 2},
    {"_girt_exp_rs", (DL_FUNC) &_girt_exp_rs, 2},
    {"_girt_rnorm_trunc", (DL_FUNC) &_girt_rnorm_trunc, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_girt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
